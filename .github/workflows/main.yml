name: Deploy Staging → Produção 🚀

on:
  push:
    branches:
      - staging

jobs:
  deploy-em-staging:
    name: Deploy em Staging 🟢
    runs-on: ubuntu-latest
    steps:
      - name: Verificar se o workflow de deploy-staging.yml existe no repositório ${{ github.repository }}
        id: check_staging
        run: |
          echo "🔍 Verificando se o workflow staging.yml existe no repositório ${{ github.repository }}..."
          if ! gh api repos/${{ github.repository }}/contents/.github/workflows/staging.yml > /dev/null 2>&1; then
            echo "❌ Erro: O workflow staging.yml não foi encontrado no repositório ${{ github.repository }}."
            echo "skip_step=true" >> $GITHUB_ENV
          else
            echo "✅ Workflow staging.yml encontrado. Prosseguindo com a execução."
            echo "skip_step=false" >> $GITHUB_ENV
          fi

      - name: Chamar o workflow de deploy-staging.yml no repositório ${{ github.repository }}
        if: env.skip_step != 'true'
        run: |
          echo "🔄 Chamando o workflow staging.yml no repositório ${{ github.repository }}..."
          gh workflow run staging.yml --repo ${{ github.repository }}

  realizar-deploy-em-producao:
    name: Realizar deploy em produção? ⚠️
    needs: deploy-em-staging
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Aguardando aprovação manual para produção 👨‍💻
        run: echo "Aguardando aprovação..."

  merge-para-main:
    name: Merge para Main 🔀
    needs: realizar-deploy-em-producao
    runs-on: ubuntu-latest
    outputs:
      merged: ${{ steps.verifica_pr.outputs.merged }}
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Criar Pull Request staging → main
        id: criar_pr
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh repo set-default ${{ github.repository }}
          TIMESTAMP=$(TZ=America/Sao_Paulo date +"%d/%m/%Y %H:%M:%S")
          PR_TITLE="Publicação $TIMESTAMP"
          PR_BODY="Pull Request automático feito pelo workflow de deploy"
          PR_URL=$(gh pr create --base main --head staging --title "$PR_TITLE" --body "$PR_BODY" || true)
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Merge Pull Request
        id: verifica_pr
        if: env.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr merge $PR_NUMBER --merge --repo ${{ github.repository }}
          echo "merged=true" >> $GITHUB_OUTPUT

  deploy-em-producao:
    name: Deploy em Produção 🔴
    needs: merge-para-main
    runs-on: ubuntu-latest
    if: needs.merge-para-main.outputs.merged == 'true'
    steps:
      - name: Verificar se o workflow de deploy-production.yml existe no repositório ${{ github.repository }}
        id: check_production
        run: |
          echo "🔍 Verificando se o workflow production.yml existe no repositório ${{ github.repository }}..."
          if ! gh api repos/${{ github.repository }}/contents/.github/workflows/production.yml > /dev/null 2>&1; then
            echo "❌ Erro: O workflow production.yml não foi encontrado no repositório ${{ github.repository }}."
            echo "skip_step=true" >> $GITHUB_ENV
          else
            echo "✅ Workflow production.yml encontrado. Prosseguindo com a execução."
            echo "skip_step=false" >> $GITHUB_ENV

      - name: Chamar o workflow de deploy-production.yml no repositório ${{ github.repository }}
        if: env.skip_step != 'true'
        run: |
          echo "🔄 Chamando o workflow production.yml no repositório ${{ github.repository }}..."
          gh workflow run production.yml --repo ${{ github.repository }}
